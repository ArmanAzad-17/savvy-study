service: demo-savvy-app

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "*"

plugins:
  - serverless-appsync-plugin
  # - serverless-offline

functions:
  demoSavvyApp:
    handler: app/handler.savvyApp

  # demoDynamoDbApi:
  #   handler: restApi/handler.dynamoDbAppApi
  #   events:
  #     - http:
  #         path: /users
  #         method: ANY


resources:
  Resources:
    demoSavvyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: demoSavvyTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK # partition key
            KeyType: HASH
          - AttributeName: SK # sort key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
          # - Name: id
          #   Required: true
          #   Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"



custom:
  appSync:
    name: ${self:service}-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW
      userPoolId: ${self:provider.environment.user_pool_id}
    additionalAuthenticationProviders:
      - authenticationType: API_KEY
    mappingTemplates:      
      - type: Query
        field: getAllUser
        dataSource: demoSavvyAppDataSource
        request: false
        response: false
      - type: Query
        field: getMyProfile
        dataSource: demoSavvyAppDataSource
        request: false
        response: false
      - type: Query
        field: getSignIn
        dataSource: demoSavvyAppDataSource
        request: false
        response: false
      - type: Mutation
        field: registerUser
        dataSource: demoSavvyAppDataSource
        request: false
        response: false
      - type: Mutation
        field: updateMyProfile
        dataSource: demoSavvyAppDataSource
        request: false
        response: false
    dataSources:        
      - type: AWS_LAMBDA
        name: demoSavvyAppDataSource
        config:
          functionName: demoSavvyApp